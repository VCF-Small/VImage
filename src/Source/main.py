# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'c:\Users\Himanshu\Desktop\Files\Projects\VImage\VImage-1\tests\VImage_Main.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
import action_controls
import image_processing
from PIL import Image, ImageQt, ImageFilter, ImageEnhance
import sys
import cv2
import numpy as np

class Ui_Resize(QtWidgets.QMainWindow):
        # ensure this window gets garbage-collected when closed
    def setupUi(self, Resize):
        Resize.setObjectName("Resize")
        Resize.resize(357, 156)
        Resize.setMinimumSize(QtCore.QSize(357, 156))
        Resize.setMaximumSize(QtCore.QSize(357, 156))
        self.pushButton = QtWidgets.QPushButton(Resize)
        self.pushButton.setGeometry(QtCore.QRect(80, 90, 101, 41))
        self.pushButton.setStyleSheet("font:12pt;")
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(Resize)
        self.pushButton_2.setGeometry(QtCore.QRect(190, 90, 101, 41))
        self.pushButton_2.setStyleSheet("font:12pt;")
        self.pushButton_2.setObjectName("pushButton_2")
        self.label = QtWidgets.QLabel(Resize)
        self.label.setGeometry(QtCore.QRect(25, 25, 400, 21))
        self.label.setStyleSheet("font:9pt;")
        self.label.setObjectName("label")
        self.lineEdit = QtWidgets.QLineEdit(Resize)
        self.lineEdit.setGeometry(QtCore.QRect(100, 50, 141, 31))
        self.lineEdit.setStyleSheet("font:16pt;")
        self.lineEdit.setText("")
        self.lineEdit.setObjectName("lineEdit")
        self.label_2 = QtWidgets.QLabel(Resize)
        self.label_2.setGeometry(QtCore.QRect(250, 50, 51, 31))
        self.label_2.setStyleSheet("font: 12pt;\n"
"")
        self.label_2.setObjectName("label_2")
        # if(ui.current_theme == "light"):
        #     Resize.setStyleSheet(action_controls.LightStyleSheet)
        # else:
        #     Resize.setStyleSheet(action_controls.DarkStyleSheet)
        self.retranslateUi(Resize)
        self.pushButton.clicked.connect(self.SetScale)
        self.pushButton_2.clicked.connect(Resize.close)

        self.lineEdit.setText(str(ui.size_scale))

        QtCore.QMetaObject.connectSlotsByName(Resize)


    def retranslateUi(self, Resize):
        _translate = QtCore.QCoreApplication.translate
        Resize.setWindowTitle(_translate("Resize", "Resize"))
        self.pushButton.setText(_translate("Resize", "Resize"))
        self.pushButton_2.setText(_translate("Resize", "Cancel"))
        self.label.setText(_translate("Resize", "Cange size to x% of the original image"))
        self.label_2.setText(_translate("Resize", "%"))

    def SetScale(self, Dialog):
        try:
            if(self.lineEdit.text() != ""):
                ui.size_scale = int(self.lineEdit.text())
                ui.Calculate()
                self.pushButton_2.click()
            else:
                self.pushButton_2.click()
        except:
            pass
            
class Ui_VImage_Main(object):
    def setupUi(self, VImage_Main):
        self.open_path = None
        self.save_path = None
        self.imgData = None  # This is The PIL Image
        self.image = None  # This is the QT Image
        self.preview_img_data = None
        self.filter_img_data = None
        self.rotate_angle = 0
        self.is_Flip = False
        self.size_scale = 100 #100 means same scale
        self.current_theme = "light"
        VImage_Main.setObjectName("VImage_Main")
        VImage_Main.resize(1373, 891)
        VImage_Main.setMinimumSize(QtCore.QSize(640, 480))
        VImage_Main.setStyleSheet("QSlider::groove:horizontal {height: 10px; margin: 0 0;}\n"
                                  "QSlider::handle:horizontal {background-color: rgb(0,150,250); border: 1px; border-radius:3px; height: \n"
                                  "40px; width: 40px; margin: 0 0;}\n"
                                  "QSlider::handle:horizontal:hover {background-color: rgb(0,200,150); border: 1px; border-radius:3px; height: \n"
                                  "    40px; width: 40px; margin: 0 0;}\n"
                                  "*{\n"
                                  "    \n"
                                  "    font: 8pt \"MS Shell Dlg 2\";\n"
                                  "}\n"
                                  "#Tool_Box QLabel{\n"
                                  "\n"
                                  "    font: 10pt \"MS Shell Dlg 2\";\n"
                                  "}\n"
                                  "\n"
                                  "QPushButton{\n"
                                  "    background-color:rgb(230,240,240);\n"
                                  "border:none;\n"
                                  "border-radius: 5px;\n"
                                  "}\n"
                                  "\n"
                                  "QPushButton:hover{\n"
                                  "    background-color:rgb(230,255,255);\n"
                                  "    border:none;\n"
                                  "}\n"
                                  "\n"
                                  "QPushButton:pressed{\n"
                                  "    background-color:rgb(200,255,255);\n"
                                  "    border:none;\n"
                                  "}\n"
                                  "\n"
                                  "#VImage_Main{\n"
                                  "    background-color:rgb(255,255,255);\n"
                                  "}\n"
                                  "\n"
                                  "")
        self.centralwidget = QtWidgets.QWidget(VImage_Main)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.Filter_Box = QtWidgets.QGroupBox(self.centralwidget)
        self.Filter_Box.setMinimumHeight(120)
        self.Filter_Box.setMaximumSize(QtCore.QSize(16777215, 120))
        self.Filter_Box.setObjectName("Filter_Box")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.Filter_Box)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.Template_Label_1 = QtWidgets.QLabel(self.Filter_Box)
        self.Template_Label_1.setCursor(
            QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Template_Label_1.setText("")
        self.Template_Label_1.setObjectName("Template_Label_1")
        self.gridLayout_3.addWidget(self.Template_Label_1, 0, 0, 1, 1)
        self.Template_Label_2 = QtWidgets.QLabel(self.Filter_Box)
        self.Template_Label_2.setCursor(
            QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Template_Label_2.setText("")
        self.Template_Label_2.setObjectName("Template_Label_2")
        self.gridLayout_3.addWidget(self.Template_Label_2, 0, 1, 1, 1)
        self.Template_Label_7 = QtWidgets.QLabel(self.Filter_Box)
        self.Template_Label_7.setCursor(
            QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Template_Label_7.setText("")
        self.Template_Label_7.setObjectName("Template_Label_7")
        self.gridLayout_3.addWidget(self.Template_Label_7, 0, 6, 1, 1)
        self.Template_Label_4 = QtWidgets.QLabel(self.Filter_Box)
        self.Template_Label_4.setCursor(
            QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Template_Label_4.setText("")
        self.Template_Label_4.setObjectName("Template_Label_4")
        self.gridLayout_3.addWidget(self.Template_Label_4, 0, 3, 1, 1)
        self.Template_Label_8 = QtWidgets.QLabel(self.Filter_Box)
        self.Template_Label_8.setCursor(
            QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Template_Label_8.setText("")
        self.Template_Label_8.setObjectName("Template_Label_8")
        self.gridLayout_3.addWidget(self.Template_Label_8, 0, 7, 1, 1)
        self.Template_Label_3 = QtWidgets.QLabel(self.Filter_Box)
        self.Template_Label_3.setCursor(
            QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Template_Label_3.setText("")
        self.Template_Label_3.setObjectName("Template_Label_3")
        self.gridLayout_3.addWidget(self.Template_Label_3, 0, 2, 1, 1)
        self.Template_Label_6 = QtWidgets.QLabel(self.Filter_Box)
        self.Template_Label_6.setCursor(
            QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Template_Label_6.setText("")
        self.Template_Label_6.setObjectName("Template_Label_6")
        self.gridLayout_3.addWidget(self.Template_Label_6, 0, 5, 1, 1)
        self.Template_Label_5 = QtWidgets.QLabel(self.Filter_Box)
        self.Template_Label_5.setCursor(
            QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Template_Label_5.setText("")
        self.Template_Label_5.setObjectName("Template_Label_5")
        self.gridLayout_3.addWidget(self.Template_Label_5, 0, 4, 1, 1)
        self.gridLayout.addWidget(self.Filter_Box, 0, 1, 1, 1)
        self.Image_Box = QtWidgets.QGroupBox(self.centralwidget)
        self.Image_Box.setAlignment(QtCore.Qt.AlignCenter)
        self.Image_Box.setObjectName("Image_Box")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.Image_Box)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.Image_Label = QtWidgets.QLabel(self.Image_Box)
        self.Image_Label.setMouseTracking(True)
        self.Image_Label.setText("")
        self.Image_Label.setAlignment(QtCore.Qt.AlignCenter)
        self.Image_Label.setObjectName("Image_Label")
        self.gridLayout_5.addWidget(self.Image_Label, 0, 0, 1, 1)
        self.gridLayout.addWidget(self.Image_Box, 1, 1, 1, 1)
        self.Tool_Box = QtWidgets.QGroupBox(self.centralwidget)
        self.Tool_Box.setMaximumSize(QtCore.QSize(230, 16777215))
        self.Tool_Box.setAlignment(
            QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignTop)
        self.Tool_Box.setObjectName("Tool_Box")
        self.formLayout = QtWidgets.QFormLayout(self.Tool_Box)
        self.formLayout.setObjectName("formLayout")
        self.label = QtWidgets.QLabel(self.Tool_Box)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.formLayout.setWidget(
            1, QtWidgets.QFormLayout.FieldRole, self.label)
        self.Brightness_Slider = QtWidgets.QSlider(self.Tool_Box)
        self.Brightness_Slider.setMinimum(0)
        self.Brightness_Slider.setMaximum(200)
        self.Brightness_Slider.setValue(100)
        self.Brightness_Slider.setOrientation(QtCore.Qt.Horizontal)
        self.Brightness_Slider.setObjectName("Brightness_Slider")
        self.formLayout.setWidget(
            2, QtWidgets.QFormLayout.SpanningRole, self.Brightness_Slider)
        self.label_2 = QtWidgets.QLabel(self.Tool_Box)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.formLayout.setWidget(
            3, QtWidgets.QFormLayout.SpanningRole, self.label_2)
        self.label_3 = QtWidgets.QLabel(self.Tool_Box)
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.formLayout.setWidget(
            5, QtWidgets.QFormLayout.SpanningRole, self.label_3)
        self.Sharpness_Slider = QtWidgets.QSlider(self.Tool_Box)
        self.Sharpness_Slider.setMinimum(0)
        self.Sharpness_Slider.setMaximum(200)
        self.Sharpness_Slider.setValue(100)
        self.Sharpness_Slider.setOrientation(QtCore.Qt.Horizontal)
        self.Sharpness_Slider.setObjectName("Sharpness_Slider")
        self.formLayout.setWidget(
            6, QtWidgets.QFormLayout.SpanningRole, self.Sharpness_Slider)
        self.label_4 = QtWidgets.QLabel(self.Tool_Box)
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setObjectName("label_4")
        self.formLayout.setWidget(
            7, QtWidgets.QFormLayout.SpanningRole, self.label_4)
        self.Saturation_Slider = QtWidgets.QSlider(self.Tool_Box)
        self.Saturation_Slider.setMinimum(0)
        self.Saturation_Slider.setMaximum(200)
        self.Saturation_Slider.setValue(100)
        self.Saturation_Slider.setOrientation(QtCore.Qt.Horizontal)
        self.Saturation_Slider.setObjectName("Saturation_Slider")
        self.formLayout.setWidget(
            8, QtWidgets.QFormLayout.SpanningRole, self.Saturation_Slider)
        # self.label_5 = QtWidgets.QLabel(self.Tool_Box)
        # self.label_5.setAlignment(QtCore.Qt.AlignCenter)
        # self.label_5.setObjectName("label_5")
        # self.formLayout.setWidget(9, QtWidgets.QFormLayout.SpanningRole, self.label_5)
        # self.Hue_Slider = QtWidgets.QSlider(self.Tool_Box)
        # self.Hue_Slider.setMinimum(-100)
        # self.Hue_Slider.setMaximum(100)
        # self.Hue_Slider.setOrientation(QtCore.Qt.Horizontal)
        # self.Hue_Slider.setObjectName("Hue_Slider")
        # self.formLayout.setWidget(10, QtWidgets.QFormLayout.SpanningRole, self.Hue_Slider)
        self.Rotate_Box = QtWidgets.QGroupBox(self.Tool_Box)
        self.Rotate_Box.setMinimumSize(QtCore.QSize(0, 100))
        self.Rotate_Box.setAlignment(
            QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignTop)
        self.Rotate_Box.setObjectName("Rotate_Box")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.Rotate_Box)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.Rotate_Right_Button = QtWidgets.QPushButton(self.Rotate_Box)
        self.Rotate_Right_Button.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(
            "/VImage/rotate_right_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Rotate_Right_Button.setIcon(icon)
        self.Rotate_Right_Button.setIconSize(QtCore.QSize(48, 48))
        self.Rotate_Right_Button.setObjectName("Rotate_Right_Button")
        self.gridLayout_4.addWidget(self.Rotate_Right_Button, 0, 2, 1, 1)
        self.Rotate_Flip_Button = QtWidgets.QPushButton(self.Rotate_Box)
        self.Rotate_Flip_Button.setMinimumSize(QtCore.QSize(0, 50))
        self.Rotate_Flip_Button.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(
            "/VImage/rotate_flip_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Rotate_Flip_Button.setIcon(icon1)
        self.Rotate_Flip_Button.setIconSize(QtCore.QSize(48, 48))
        self.Rotate_Flip_Button.setObjectName("Rotate_Flip_Button")
        self.gridLayout_4.addWidget(self.Rotate_Flip_Button, 0, 1, 1, 1)
        self.Rotate_Left_Button = QtWidgets.QPushButton(self.Rotate_Box)
        self.Rotate_Left_Button.setAutoFillBackground(False)
        self.Rotate_Left_Button.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(
            "/VImage/rotate_left_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Rotate_Left_Button.setIcon(icon2)
        self.Rotate_Left_Button.setIconSize(QtCore.QSize(48, 48))
        self.Rotate_Left_Button.setObjectName("Rotate_Left_Button")
        self.gridLayout_4.addWidget(self.Rotate_Left_Button, 0, 0, 1, 1)
        self.formLayout.setWidget(
            11, QtWidgets.QFormLayout.SpanningRole, self.Rotate_Box)
        self.Contrast_Slider = QtWidgets.QSlider(self.Tool_Box)
        self.Contrast_Slider.setMinimum(50)
        self.Contrast_Slider.setMaximum(150)
        self.Contrast_Slider.setValue(100)
        self.Contrast_Slider.setOrientation(QtCore.Qt.Horizontal)
        self.Contrast_Slider.setObjectName("Contrast_Slider")
        self.formLayout.setWidget(
            4, QtWidgets.QFormLayout.SpanningRole, self.Contrast_Slider)
        self.Crop_Button = QtWidgets.QPushButton(self.Tool_Box)
        self.Crop_Button.setObjectName("Crop_Button")
        self.Crop_Button.setText("Crop")
        self.Crop_Button.setStyleSheet("font: 10pt;padding:10px")
        self.formLayout.setWidget(
            12, QtWidgets.QFormLayout.SpanningRole, self.Crop_Button)

        # Denoise Image button
        self.Denoise_Button = QtWidgets.QPushButton(self.Tool_Box)
        self.Denoise_Button.setObjectName("Denoise_Button")
        self.Denoise_Button.setText("Denoise")
        self.Denoise_Button.setStyleSheet("font: 10pt;padding:10px")
        self.formLayout.setWidget(
            15, QtWidgets.QFormLayout.SpanningRole, self.Denoise_Button)

        
        self.Resize_Button = QtWidgets.QPushButton(self.Tool_Box)
        self.Resize_Button.setObjectName("Resize_Button")
        self.Resize_Button.setText("Resize")
        self.Resize_Button.setStyleSheet("font: 10pt;padding:10px")
        self.formLayout.setWidget(
            13, QtWidgets.QFormLayout.SpanningRole, self.Resize_Button)
        self.Reset_Button = QtWidgets.QPushButton(self.Tool_Box)
        self.Reset_Button.setObjectName("Reset_Button")
        self.Reset_Button.setText("Reset Image")
        self.Reset_Button.setStyleSheet("font: 10pt; padding:10px")
        self.formLayout.setWidget(
            14, QtWidgets.QFormLayout.SpanningRole, self.Reset_Button)
        self.gridLayout.addWidget(self.Tool_Box, 0, 0, 2, 1)
        self.gridLayout_2.addLayout(self.gridLayout, 0, 0, 1, 1)
        VImage_Main.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(VImage_Main)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1373, 16))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuExport = QtWidgets.QMenu(self.menuFile)
        self.menuExport.setObjectName("menuExport")
        self.menuAbout = QtWidgets.QMenu(self.menubar)
        self.menuAbout.setObjectName("menuAbout")
        self.menuTheme = QtWidgets.QMenu(self.menubar)
        self.menuTheme.setObjectName("menuTheme")
        VImage_Main.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(VImage_Main)
        self.statusbar.setObjectName("statusbar")
        VImage_Main.setStatusBar(self.statusbar)
        self.actionVImage = QtWidgets.QAction(VImage_Main)
        self.actionVImage.setObjectName("actionVImage")
        self.actionVCF = QtWidgets.QAction(VImage_Main)
        self.actionVCF.setObjectName("actionVCF")
        self.actionOpen = QtWidgets.QAction(VImage_Main)
        self.actionOpen.setObjectName("actionOpen")
        self.actionSave = QtWidgets.QAction(VImage_Main)
        self.actionSave.setObjectName("actionSave")
        self.actionSave_As = QtWidgets.QAction(VImage_Main)
        self.actionSave_As.setObjectName("actionSave_As")
        self.actionExit = QtWidgets.QAction(VImage_Main)
        self.actionExit.setObjectName("actionExit")
        self.actionPNG = QtWidgets.QAction(VImage_Main)
        self.actionPNG.setObjectName("actionPNG")
        self.actionJPG = QtWidgets.QAction(VImage_Main)
        self.actionJPG.setObjectName("actionJPG")
        self.actionPDF = QtWidgets.QAction(VImage_Main)
        self.actionPDF.setObjectName("actionPDF")
        self.actionLight = QtWidgets.QAction(VImage_Main)
        self.actionLight.setObjectName("actionLight")
        self.actionDark = QtWidgets.QAction(VImage_Main)
        self.actionDark.setObjectName("actionDark")
        self.menuExport.addAction(self.actionPNG)
        self.menuExport.addAction(self.actionJPG)
        self.menuExport.addAction(self.actionPDF)
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addAction(self.actionSave_As)
        self.menuFile.addAction(self.menuExport.menuAction())
        self.menuFile.addAction(self.actionExit)
        self.menuAbout.addAction(self.actionVImage)
        self.menuAbout.addAction(self.actionVCF)
        self.menuTheme.addAction(self.actionLight)
        self.menuTheme.addAction(self.actionDark)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuAbout.menuAction())
        self.menubar.addAction(self.menuTheme.menuAction())

        self.retranslateUi(VImage_Main)
        QtCore.QMetaObject.connectSlotsByName(VImage_Main)

    def retranslateUi(self, VImage_Main):
        _translate = QtCore.QCoreApplication.translate
        VImage_Main.setWindowTitle(_translate(
            "VImage_Main", "VImage - Simple Image Manipulation"))
        self.Filter_Box.setTitle(_translate("VImage_Main", "Filters"))
        self.Image_Box.setTitle(_translate("VImage_Main", "Image"))
        self.Tool_Box.setTitle(_translate("VImage_Main", "Tool Box"))
        self.label.setText(_translate("VImage_Main", "Brightness"))
        self.label_2.setText(_translate("VImage_Main", "Contrast"))
        self.label_3.setText(_translate("VImage_Main", "Sharpness"))
        self.label_4.setText(_translate("VImage_Main", "Saturation"))
        # self.label_5.setText(_translate("VImage_Main", "Hue"))
        self.Rotate_Box.setTitle(_translate("VImage_Main", "Rotate"))
        self.menuFile.setTitle(_translate("VImage_Main", "File"))
        self.menuExport.setTitle(_translate("VImage_Main", "Export"))
        self.menuAbout.setTitle(_translate("VImage_Main", "About"))
        self.menuTheme.setTitle(_translate("VImage_Main", "Theme"))
        self.actionVImage.setText(_translate("VImage_Main", "VImage"))
        self.actionVCF.setText(_translate("VImage_Main", "VCF"))
        self.actionOpen.setText(_translate("VImage_Main", "Open"))
        self.actionSave.setText(_translate("VImage_Main", "Save"))
        self.actionSave_As.setText(_translate("VImage_Main", "Save As"))
        self.actionExit.setText(_translate("VImage_Main", "Exit"))
        self.actionPNG.setText(_translate("VImage_Main", "PNG"))
        self.actionJPG.setText(_translate("VImage_Main", "JPG"))
        self.actionPDF.setText(_translate("VImage_Main", "PDF"))
        self.actionLight.setText(_translate("VImage_Main", "Light"))
        self.actionDark.setText(_translate("VImage_Main", "Dark"))
        self.setupControls()

    def setupControls(self):
        # Modules By VCF Team Memeber Himanshu
        self.actionOpen.triggered.connect(self.Open)
        self.actionSave_As.triggered.connect(self.SaveAs)
        self.actionSave.triggered.connect(self.Save)
        self.actionPNG.triggered.connect(self.ExportPNG)
        self.actionJPG.triggered.connect(self.ExportJPG)
        self.actionPDF.triggered.connect(self.ExportPDF)
        self.actionExit.triggered.connect(self.Exit)
        self.actionVImage.triggered.connect(action_controls.AboutVImage)
        self.actionVCF.triggered.connect(action_controls.AboutVCF)
        self.actionDark.triggered.connect(self.DarkMode)
        self.actionLight.triggered.connect(self.LightMode)
        self.Reset_Button.clicked.connect(self.Reset_Image)
        self.Resize_Button.clicked.connect(self.Resize_Image)
        # Modules By VCF Team Member Ankit
        self.Brightness_Slider.valueChanged.connect(self.Calculate)
        self.Contrast_Slider.valueChanged.connect(self.Calculate)
        self.Sharpness_Slider.valueChanged.connect(self.Calculate)
        self.Saturation_Slider.valueChanged.connect(self.Calculate)
        # self.Hue_Slider.valueChanged.connect(self.Calculate)
        self.Rotate_Right_Button.clicked.connect(self.RotateRight)
        self.Rotate_Left_Button.clicked.connect(self.RotateLeft)
        self.Rotate_Flip_Button.clicked.connect(self.Flip)
        self.Crop_Button.clicked.connect(self.crop)
        self.Denoise_Button.clicked.connect(self.Denoise_Img)
        self.Template_Label_1.mousePressEvent = self.Set_Filter1
        self.Template_Label_2.mousePressEvent = self.Set_Filter2
        self.Template_Label_3.mousePressEvent = self.Set_Filter3
        self.Template_Label_4.mousePressEvent = self.Set_Filter4
        self.Template_Label_5.mousePressEvent = self.Set_Filter5
        self.Template_Label_6.mousePressEvent = self.Set_Filter6
        self.Template_Label_7.mousePressEvent = self.Set_Filter7
        self.Template_Label_8.mousePressEvent = self.Set_Filter8

    def test(self):
        print(self.size_scale)
# Implementation of different methods
# Modules By Himanshu
    def Save(self):
        if(self.save_path == "" or self.save_path == None):
            self.SaveAs()
        else:
            action_controls.Save(self.imgData, self.save_path)

    def SaveAs(self):
        self.save_path = action_controls.SaveAs(self.imgData)

    def Exit(self):
        app.exit()

    def ExportPNG(self):
        self.preview_img_data = self.Render()
        action_controls.ExportPNG(self.preview_img_data)

    def ExportJPG(self):
        self.preview_img_data = self.Render()
        action_controls.ExportJPG(self.preview_img_data)

    def ExportPDF(self):
        self.preview_img_data = self.Render()
        action_controls.ExportPDF(self.preview_img_data)

    def Render(self):
        if(self.filter_img_data.size[0] > 300):
            self.preview_img_data = self.filter_img_data.resize((int(self.imgData.size[0] * self.size_scale/100),int(self.imgData.size[1] * self.size_scale/100)))
            return self.preview_img_data
        else:
            try:
                self.preview_img_data = self.imgData.resize((int(self.imgData.size[0] * self.size_scale/100),int(self.imgData.size[1] * self.size_scale/100)))
                b = self.Brightness_Slider.value()
                c = self.Contrast_Slider.value()
                s = self.Sharpness_Slider.value()
                st = self.Saturation_Slider.value()
                # h = self.Hue_Slider.value()
                if b != 0:
                    self.preview_img_data = self.Brightness_Control(b)
                if c != 0:
                    self.preview_img_data = self.Contrast_Control(c)
                if s != 0:
                    self.preview_img_data = self.Sharpness_Control(s)
                if st != 0:
                    self.preview_img_data = self.Saturation_Control(st)
                # self.preview_img_data = self.Hue_Control(h)
                if self.rotate_angle:
                    self.preview_img_data = image_processing.Rotate(
                        self.preview_img_data, self.rotate_angle)

                return self.preview_img_data
            except:
                pass

    def Open(self):
        self.Reset_Sliders()
        self.size_scale = 100
        try:
            self.preview_img_data = self.imgData
            self.open_path, self.image, self.imgData = action_controls.Open()
            self.Show()
            self.Set_Filter_Label()
        except:
            pass

    def DarkMode(self):
        action_controls.DarkMode(VImage_Main)

    def LightMode(self):
        action_controls.LightMode(VImage_Main)

    def Show(self):
        self.Image_Label.setPixmap(QtGui.QPixmap.fromImage(self.image))
        self.Image_Label.setScaledContents(True)
    
    def Resize_Image(self):
        self.window = QtWidgets.QWidget()
        self.ui = Ui_Resize()
        self.ui.setupUi(self.window)
        self.window.show()


    def Reset_Sliders(self):
        self.Brightness_Slider.setValue(100)
        self.Contrast_Slider.setValue(100)
        self.Saturation_Slider.setValue(100)
        self.Sharpness_Slider.setValue(100)
        

    def Reset_Image(self):
        try:
            self.size_scale = 100
            self.imgData = Image.open(self.open_path)
            self.image = ImageQt.ImageQt(self.imgData)
            self.Reset_Sliders()
            self.Set_Filter_Label()
            self.Show()
        except:
            pass

# *******************************************************************
# Modules By Ankit

    def Brightness_Control(self, b):
        return image_processing.Brightness_Control(self.preview_img_data, b)

    def Contrast_Control(self, c):
        return image_processing.Contrast_Control(self.preview_img_data, c)

    def Sharpness_Control(self, s):
        return image_processing.Sharpness_Control(self.preview_img_data, s)

    def Saturation_Control(self, st):
        return image_processing.Saturation_Control(self.preview_img_data, st)

    def Hue_Control(self, h):
        return image_processing.Hue_Control(self.preview_img_data, h)

    def Calculate(self):
        try:
            self.preview_img_data = self.imgData.resize((int(1920/1.5 * self.size_scale/100), int(1080/1.5 * self.size_scale/100)))
            b = self.Brightness_Slider.value()
            c = self.Contrast_Slider.value()
            s = self.Sharpness_Slider.value()
            st = self.Saturation_Slider.value()
            # h = self.Hue_Slider.value()
            if b != 0:
                self.preview_img_data = self.Brightness_Control(b)
            if c != 0:
                self.preview_img_data = self.Contrast_Control(c)
            if s != 0:
                self.preview_img_data = self.Sharpness_Control(s)
            if st != 0:
                self.preview_img_data = self.Saturation_Control(st)
            # self.preview_img_data = self.Hue_Control(h)
            if self.rotate_angle:
                self.preview_img_data = image_processing.Rotate(
                    self.preview_img_data, self.rotate_angle)

            self.image = ImageQt.ImageQt(self.preview_img_data)
            self.Show()
        except:
            pass

    def RotateRight(self):
        self.rotate_angle = 0 if self.rotate_angle == -270 else self.rotate_angle - 90
        self.Calculate()

    def RotateLeft(self):
        self.rotate_angle = 0 if self.rotate_angle == 270 else self.rotate_angle + 90
        self.Calculate()

    def Flip(self):
        try:
            self.preview_img_data = image_processing.Flip(self.preview_img_data)
            self.imgData = image_processing.Flip(self.imgData)
            self.image = ImageQt.ImageQt(self.preview_img_data)
            self.Show()
        except:
            pass

    def crop(self):
        try:
            self.preview_img_data = image_processing.Crop(QtGui.QPixmap.fromImage(self.image))
            self.image = self.preview_img_data.toImage()
            self.imgData = ImageQt.fromqimage(self.image)
            self.Set_Filter_Label()
            self.Show()
        except:
            pass

    def Set_Filter_Label(self):

        self.filter_img_data = self.imgData.resize((300,300))
        self.Template_Label_1.setPixmap(ImageQt.toqpixmap(self.filter_img_data.filter(ImageFilter.BLUR)))
        self.Template_Label_1.setScaledContents(True)

        self.Template_Label_2.setPixmap(ImageQt.toqpixmap(self.filter_img_data.filter(ImageFilter.Kernel((3, 3), (-1, -1, -1, -1, 9, -1, -1, -1, -1), 1, 0))))
        self.Template_Label_2.setScaledContents(True)

        self.Template_Label_3.setPixmap(ImageQt.toqpixmap(self.filter_img_data.filter(ImageFilter.EMBOSS)))
        self.Template_Label_3.setScaledContents(True)

        self.Template_Label_4.setPixmap(ImageQt.toqpixmap(self.filter_img_data.filter(ImageFilter.MaxFilter)))
        self.Template_Label_4.setScaledContents(True)

        self.Template_Label_5.setPixmap(ImageQt.toqpixmap(self.filter_img_data.filter(ImageFilter.CONTOUR)))
        self.Template_Label_5.setScaledContents(True)

        self.Template_Label_6.setPixmap(ImageQt.toqpixmap(ImageEnhance.Color(self.filter_img_data).enhance(1)))
        self.Template_Label_6.setScaledContents(True)
        
        self.Template_Label_7.setPixmap(ImageQt.toqpixmap(ImageEnhance.Color(self.filter_img_data).enhance(0)))
        self.Template_Label_7.setScaledContents(True)

        self.filter_img_data = ImageEnhance.Color(self.filter_img_data).enhance(1.5)
        self.Template_Label_8.setPixmap(ImageQt.toqpixmap(ImageEnhance.Brightness(self.filter_img_data).enhance(1.5)))
        self.Template_Label_8.setScaledContents(True)
    
    def Set_Filter1(self, event):
        self.filter_img_data = self.imgData.filter(ImageFilter.BLUR)
        self.image = ImageQt.ImageQt(self.filter_img_data)
        self.Reset_Sliders()
        self.Show()
    
    def Set_Filter2(self, event):
        self.filter_img_data = self.imgData.filter(ImageFilter.Kernel((3, 3), (-1, -1, -1, -1, 9, -1, -1, -1, -1), 1, 0))
        self.image = ImageQt.ImageQt(self.filter_img_data)
        self.Reset_Sliders()
        self.Show()
    
    def Set_Filter3(self, event):
        self.filter_img_data = self.imgData.filter(ImageFilter.EMBOSS)
        self.image = ImageQt.ImageQt(self.filter_img_data)
        self.Reset_Sliders()
        self.Show()
    
    def Set_Filter4(self, event):
        self.filter_img_data = self.imgData.filter(ImageFilter.MaxFilter)
        self.image = ImageQt.ImageQt(self.filter_img_data)
        self.Reset_Sliders()
        self.Show()
    
    def Set_Filter5(self, event):
        self.filter_img_data = self.imgData.filter(ImageFilter.CONTOUR)
        self.image = ImageQt.ImageQt(self.filter_img_data)
        self.Reset_Sliders()
        self.Show()
    
    def Set_Filter6(self, event):
        self.filter_img_data = ImageEnhance.Color(self.imgData).enhance(2)
        self.image = ImageQt.ImageQt(self.filter_img_data)
        self.Reset_Sliders()
        self.Show()
    
    
    def Set_Filter7(self, event):
        self.preview_img_data = ImageEnhance.Color(self.imgData).enhance(0)
        self.image = ImageQt.ImageQt(self.preview_img_data)
        self.Reset_Sliders()
        self.Show()

    def Set_Filter8(self, event):
        self.filter_img_data = ImageEnhance.Color(self.imgData).enhance(1.5)
        self.filter_img_data = ImageEnhance.Brightness(self.filter_img_data).enhance(1.5)
        self.image = ImageQt.ImageQt(self.filter_img_data)
        self.Reset_Sliders()
        self.Show()

    def Denoise_Img(self):
        try:
            self.image = Image.fromarray(cv2.medianBlur(np.array(self.imgData), 5))
            self.imgData = self.image
            self.image = ImageQt.ImageQt(self.image)
            self.Set_Filter_Label()
            self.Show()
        except:
            pass
    

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    VImage_Main = QtWidgets.QMainWindow()
    ui = Ui_VImage_Main()
    ui.setupUi(VImage_Main)
    VImage_Main.show()
    sys.exit(app.exec_())
